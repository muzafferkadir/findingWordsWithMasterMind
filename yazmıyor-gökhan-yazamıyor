#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <locale>

using namespace std;


class Dictionary
{
    public:
    vector<wstring> list;
    string inputFile = "list.txt";
    wstring sampleWord;


    Dictionary();
    void chooseRandomWord();
    void addWordsFromInput();

};

void Dictionary::addWordsFromInput()
{

    wifstream input;
    input.open(inputFile);
    wstring word;

    while(!input.eof())
    {
        input >> word;
        list.push_back(word);
    }
    //cout<<list.size()<<endl;
}

void Dictionary::chooseRandomWord()
{
    int random;
    srand(time(NULL));
    random = rand() % list.size();
    sampleWord = list[random];
}

Dictionary::Dictionary()
{

}

class Menu
{
    public:
    Dictionary dictionary;

    Menu();
    void start();
    void getWeight();
    void getCartesian();
    void goBack();
    void printList();
    int compareWords(wstring word1, wstring word2);
    int comWords(wstring word1, wstring word2);
};

void Menu::start()
{
    cout<<"Lütfen Oynamak istediğiniz Oyunu Seçiniz.."<<endl;
    cout<<"İnsan-bilgisayar Normali için '1' "<<endl;
    cout<<"İnsan-bilgisayar Kartezyen için '2' "<<endl;
    cout<<"İnsan-bilgisayar hem Kartezyen hem Normali için '3' "<<endl;
    cout<<"Bilgisayar-İnsan Normali İçin '4' "<<endl;
    cout<<"Bilgisayar-İnsan Kartezyen İçin '5' "<<endl;
    cout<<"Bilgisayar-İnsan Hem Kartezyen Hem Normali İçin '6' "<<endl;
    cout<<"Oyundan Çıkmak  için '0' Giriniz"<<endl;
    int a;
    cin>>a;

    switch (a){
    case 1:
            dictionary.addWordsFromInput();
            dictionary.chooseRandomWord();

            cout<<"insan-pc"<<endl;
            cout<<"Toplam Kelime Sayisi : "<<dictionary.list.size()<<endl;
            wcout<<dictionary.list[5]<<endl;
            getWeight();
        start();
    case 2:
            cout<<"pc-insan"<<endl;
            start();
    case 3:
        cout<<"program sonu";
        break;
    default:
        cout<<"gecersiz giris"<<endl;
       start() ;

    }



}
Menu::Menu()
{

}

void Menu::getWeight()
{
    cout<<"PLEASE ENTER SAME LETTER NUMBER"<<endl;
    wcout<<"WORD:"<<dictionary.sampleWord<< endl;
    int weight;
    cin >> weight;


    for(int i=0; i<dictionary.list.size();i++ )
    {
        if(weight == compareWords(dictionary.sampleWord,dictionary.list[i]))
        {
            wcout<<dictionary.list[i]<<endl;
            cout<<"weight"<<compareWords(dictionary.sampleWord,dictionary.list[i])<<endl;

        }

        else
        {
            dictionary.list.erase(dictionary.list.begin()+i);
            i--;
        }

    }

    cout<<dictionary.list.size()<<endl;

    if(dictionary.list.size()>1)
    {
        dictionary.chooseRandomWord();
        getWeight();
        wcout<<dictionary.list[1];

    }



}

void Menu::getCartesian()
{
    cout<<"PLEASE ENTER SAME LETTER NUMBER"<<endl;
    wcout<<"WORD:"<<dictionary.sampleWord<< endl;
    int cartesiann;
    cin >> cartesiann;


    for(int i=0; i<dictionary.list.size();i++ )
    {
        if(cartesiann == comWords(dictionary.sampleWord,dictionary.list[i]))
        {
            wcout<<dictionary.list[i]<<endl;
            cout<<"cartesian"<<compareWords(dictionary.sampleWord,dictionary.list[i])<<endl;

        }

        else
        {
            dictionary.list.erase(dictionary.list.begin()+i);
            i--;
        }

    }

    cout<<dictionary.list.size()<<endl;

    if(dictionary.list.size()>1)
    {
        dictionary.chooseRandomWord();
        getWeight();

    }
}

void Menu::goBack()
{
    cout<<"GO BACK[Y]"<<endl;
    string end;
    while(true){
        cin>>end;
        if((end=="y") || (end=="Y"))
            return getWeight();
    }
}

void Menu::printList()
{
    for(int i=0; i<dictionary.list.size();i++ )
    {
        wcout<<dictionary.list[i]<<endl;
    }
}

int Menu::compareWords(wstring word1, wstring word2)
{   int weight=0;
    wstring w1 = word1;
    wstring w2 = word2;


    for(int i = 0; i<w1.length(); i++)
    {
        for(int j = 0; j<w2.length();j++)
        {
            if(w1[i]==w2[j])
            {
                weight+=1;
                w2[j]=0;
                break;
            }
        }
    }

    return weight;
}
int Menu::comWords(wstring word1, wstring word2)
{
    int sirali=0;
    wstring w1 = word1;
    wstring w2 = word2;
    for(int i = 0;i<w1.length(); i++)
    {
        for(int j = 0; j<w2.length();j++)
        {
            if(w1[i]==w2[j])
            {
                sirali+=1;
            }
        }
    }

    return sirali;
}

int main()
{
    wcout.sync_with_stdio(false);
    setlocale(LC_ALL, "Turkish");
    Menu system;
    system.start();



    return 0;
}
